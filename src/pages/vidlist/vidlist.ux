<template>
    <div class="vidlist-page">
        <div class="titlebar" @click="RouterBack()">
            <div style="width: 40px; height: 40px">
                <image src="/common/icons8-back-100.png" style="width: 40px; height: 40px"></image>
            </div>
            <div class="titlebar-text">
                <text style="font-size: 40px; font-weight: bold">管理视频</text>
            </div>
        </div>
        <list style="margin-top: 40px; height: 100%; width: 100%;" if={{show_list}}>
            <list-item for={{vids_show}} type="VidListShow" style="height: 100px; width: 100%; display: flex; flex-direction: column; align-items: center; justify-content: center">
                <div class="vid">
                    <text class="vid-name">{{ $item.title }}</text>
                    <image class="vid-play-icon" src="/common/PlayVideoInList.png" @click="GoPlay($item.pics, $item.__decuri)"></image>
                    <image class="vid-delete-icon" src="/common/DeleteVideo.png" @click="GoDelete($item.pics, $item.__decuri)"></image>
                </div>
            </list-item>
        </list>
    </div>
</template>

<script>
import router from "@system.router"
import file from "@system.file"
import prompt from "@system.prompt"
export default {
  private: {
    vids_show: [],
    show_list: false
  },
  RouterBack() {
    console.log("clicked")
    router.back()
  },
  GoDelete(viduri, decuri){
    console.log("Remove Requested.")
    router.replace({
        uri: "pages/rmvid",
        params: {
          vid_uri: viduri,
          dec_uri: decuri
        }
    })
  },
  GoPlay(viduri, decuri){
    console.log("Play Requested.")
    router.replace({
        uri: "pages/play",
        params: {
          vid_uri: viduri,
          dec_uri: decuri
        }
    })
  },
  onInit() {
    file.list({
      uri: "internal://files/",
      success: (filelist) => {
        try {
          // 收集所有的 Promise
          let promises = filelist.fileList.map((fileret) => {
            if (fileret.uri.toString().includes("asplayerdec")) {
              return new Promise((resolve, reject) => {
                file.readText({
                  uri: fileret.uri.toString(),
                  success: (readret) => {
                    try {
                      var vid = JSON.parse(readret.text)
                      vid.__decuri = fileret.uri.toString()
                      console.log(vid)
                      this.vids_show.push(vid)
                      console.log("pushed")
                      resolve() // 成功解析后解决 Promise
                    } catch (error) {
                      console.error(error.toString())
                      reject(error) // 解析失败时拒绝 Promise
                    }
                  },
                  fail: (error) => {
                    console.error("读取文件失败: ", error)
                    reject(error) // 读取失败时拒绝 Promise
                  }
                })
              })
            } else {
              return Promise.resolve() // 如果不包含"asplayerdec"，立即解决 Promise
            }
          })

          // 等待所有 Promise 完成
          Promise.all(promises)
            .then(() => {
              this.show_list = true
              console.log(this.vids_show) // 所有文件读取和解析完成后执行
            })
            .catch((error) => {
              console.error("处理文件时发生错误: ", error)
            })
        } catch (error) {
          console.error(error.toString())
        }
      }
    })
  }
}
</script>

<style>
.titlebar {
    width: 55%;
    margin-top: 45px;
    align-items: center;
}

.titlebar-text {
    align-items: center;
    justify-content: center;
    width: 100%;
}

.vid {
    width: 68%;
    height: 87px;
    border-radius: 60px;
    background-color: #333333;
    flex-direction: row;
    align-items: center;
}

.vid-name {
    margin-left: 40px;
    color: white;
    font-weight: bold;
    font-size: 18px;
    max-width: 50%;
    width: 50%;
}

.vid-play-icon{
    margin-left: 10px;
}

.vid-delete-icon {
    margin-left: 10px;
}

.vidlist-page {
    display: flex;
    flex-direction: column;
    align-items: center;
    height: 100%;
    position: absolute;
    width: 100%;
}
</style>