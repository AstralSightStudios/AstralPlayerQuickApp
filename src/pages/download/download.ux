<template>
  <div class="download-page">
    <div class="titlebar" @click="RouterBack()">
        <div style="width: 40px; height: 40px">
            <image src="/common/icons8-back-100.png" style="width: 40px; height: 40px"></image>
        </div>
        <div class="titlebar-text">
            <text style="font-size: 40px; font-weight: bold">下载视频</text>
        </div>
    </div>
    <image style="margin-top: 55px; width: 80px" src={{downloading_anim_img_src}}></image>
    <slider style="margin-top: 35px; width: 65%; block-color: rgba(1,1,1,0)" @change="SliderChange()" value={{view_downloaded_frames}} max={{frames_to_download}}></slider>
    <text class="normal_text" style="margin-top: 40px;">{{down_tips_text}}</text>
    <text class="normal_text" style="margin-top: 10px;" if="show_down_num">{{downloaded_frames}} / {{frames_to_download}}</text>
  </div>
</template>

<script>
import router from "@system.router"
import fetch from "@system.fetch"
import storage from "@system.storage"
import file from "@system.file"
import request from "@system.request"
import prompt from "@system.prompt"
import { systemPromptEnabled } from "@system.shortcut"
 export default {
    public: {
        decode_token: "91200ccc-80de-45d8-8105-6cb55c9381a2",
        format: "",
        fps: "",
        w: 0,
        h: 0,
        videotitle: ""
    },
    private: {
        // 下载动画interval
        // 剩下的不多说
        downloading_anim: null,
        downloading_anim_img_src: "/common/downloadingFrames/icons8-downloading-1.png",
        downloading_anim_index_num: 1,
        downloading_anim_frame_count: 28,
        downloading_anim_loop: true,
        downloading_anim_src_header: "/common/downloadingFrames/icons8-downloading-",
        username: "",
        token: "",
        // 与UI绑定的已下载帧数显示变量
        // 每帧下载完后与downloaded_frames同步
        // 主要防止有小傻逼拉slider导致值更改
        view_downloaded_frames: 0,
        downloaded_frames: 0,
        frames_to_download: 0,
        audiosplit_count: 0,
        // 是否显示下载帧数量以及需要下载的帧数量（即 1/100 这种）
        show_down_num: true,
        // 这个你自己能看懂
        down_tips_text: "正在下载视频序列帧",
        /* 
            Base64转Uint8Array，调用全局引入的base64.js
        */
        base64ToUint8Array(base64) {
            /*
            // 使用自定义的解码函数将 Base64 字符串转换为 Uint8Array
            return this.decodeBase64(base64).buffer;
            */
            var binary_string = this.$app.$def.base64.atob(base64);
            var len = binary_string.length;
            var bytes = new Uint8Array(len);
            for (var i = 0; i < len; i++) {
                bytes[i] = binary_string.charCodeAt(i);
            }
            return bytes;
        },
        async nowDownload(down_url) {
            console.log("start download");
            const concurrentLimit = 10; // 并发限制
            let activeDownloads = 0; // 当前活跃的下载数量
            const downloadPromises = []; // 存储所有下载任务的Promise数组

            this.frames_to_download = 10; // 测试音频下载时取消注释

            for (let frameNumber = 1; frameNumber <= this.frames_to_download; frameNumber++) {
                if (activeDownloads < concurrentLimit) {
                    const fetchurl = down_url + "output_" + frameNumber + "." + this.format;
                    const downloadPromise = new Promise((resolve, reject) => {
                        request.download({
                            url: fetchurl,
                            success: (down_data) => {
                                request.onDownloadComplete({
                                    token: down_data.token,
                                    success: (uri_data) => {
                                        file.readText({
                                            uri: uri_data.uri,
                                            success: (read_data) => {
                                                //console.log(read_data)
                                                try{
                                                    const arraybuffer_write = this.base64ToUint8Array(read_data.text);
                                                    file.writeArrayBuffer({
                                                        uri: `internal://files/vid/${this.decode_token}/output_${frameNumber}.${this.format}`,
                                                        buffer: arraybuffer_write,
                                                        success: () => {
                                                            file.delete({
                                                                uri: uri_data.uri,
                                                                success: () => {
                                                                    console.log(`文件 ${frameNumber} 操作成功`);
                                                                    this.downloaded_frames ++;
                                                                    this.view_downloaded_frames = this.downloaded_frames
                                                                    resolve();
                                                                },
                                                                fail: (data, code) => {
                                                                    console.error(`删除文件失败: ${data} ${code}`);
                                                                    reject(new Error(`删除文件失败: ${data} ${code}`));
                                                                }
                                                            })
                                                        },
                                                        fail: (data, code) => {
                                                            console.error(`写入文件失败: ${data} ${code}`);
                                                            reject(new Error(`写入文件失败: ${data} ${code}`));
                                                        }
                                                    });
                                                }
                                                catch(ex){
                                                    console.error("ERROR When Readtext: " + ex)
                                                }
                                            }
                                        })
                                    },
                                    fail: (data, code) => {
                                        console.error(`监听下载状态失败: ${data} ${code}`);
                                        reject(new Error(`监听下载状态失败: ${data} ${code}`));
                                    }
                                });
                            },
                            fail: (data, code) => {
                                console.error(`创建下载任务失败: ${data} ${code}`);
                                reject(new Error(`创建下载任务失败: ${data} ${code}`));
                            }
                        });
                    }).finally(() => {
                        activeDownloads--; // 确保无论成功或失败，都适时减少活跃下载数
                    });
                    activeDownloads++; // 增加活跃下载数
                    downloadPromises.push(downloadPromise);
                } else {
                    await new Promise(resolve => setTimeout(resolve, 100)); // 等待100毫秒
                    frameNumber--; // 重试当前帧
                }
            }

            // 等待所有下载任务完成
            await Promise.all(downloadPromises).then(() => {
                console.log('所有下载已完成');
                // 这里执行下载完成后的操作
                this.onAllDownloadsComplete(down_url)
            }).catch(error => {
                console.error('下载过程中出现错误:', error);
            });
        },
        async downloadAudioFiles(down_url, totalSplits, decode_token) {
            let activeDownloads = 0;
            const concurrentLimit = 1; // 同时下载的最大数量限制
            const downloadPromises = [];

            for (let SplitNumber = 1; SplitNumber <= totalSplits; SplitNumber++) {
                if (activeDownloads < concurrentLimit) {
                    const fetchurl = down_url + "output_audio.mp3_" + SplitNumber + ".mp3split";
                    const downloadPromise = new Promise((resolve, reject) => {
                        request.download({
                            url: fetchurl,
                            success: (down_data) => {
                                request.onDownloadComplete({
                                    token: down_data.token,
                                    success: (uri_data) => {
                                        file.readText({
                                            uri: uri_data.uri,
                                            success: (read_data) => {
                                                try {
                                                    console.log("BEGIN PARSE TO UINT8ARRAY");
                                                    const arraybuffer_write = this.base64ToUint8Array(read_data.text);
                                                    console.log("BEGIN WRITE ARRAYBUFFER");
                                                    file.writeArrayBuffer({
                                                        uri: `internal://files/vid/${decode_token}/output_audio.mp3`,
                                                        buffer: arraybuffer_write,
                                                        append: true,
                                                        success: () => {
                                                            file.delete({
                                                                uri: uri_data.uri,
                                                                success: () => {
                                                                    this.downloaded_frames ++;
                                                                    this.view_downloaded_frames = this.downloaded_frames
                                                                    resolve()
                                                                },
                                                                fail: (data, code) => reject(new Error(`删除音频缓存时出错: ${data} 错误代码：${code}`))
                                                            });
                                                        },
                                                        fail: (data, code) => reject(new Error(`写入音频arraybuffer时出错: ${data} 错误代码：${code}`))
                                                    });
                                                } catch (ex) {
                                                    console.error("ERROR When Readtext: " + ex);
                                                    reject(new Error("处理base64数据时出错: " + ex));
                                                }
                                            },
                                            fail: (data, code) => reject(new Error(`读取音频base64时出错: ${data} 错误代码：${code}`))
                                        });
                                    },
                                    fail: (data, code) => reject(new Error(`监听音频下载状态时出错: ${data} 错误代码：${code}`))
                                });
                            },
                            fail: (data, code) => reject(new Error(`创建音频下载任务时出错: ${data} 错误代码：${code}`))
                        });
                    }).finally(() => {
                        activeDownloads--; // 确保无论成功或失败，都适时减少活跃下载数
                    });

                    activeDownloads++; // 增加活跃下载数
                    downloadPromises.push(downloadPromise);
                } else {
                    await new Promise(resolve => setTimeout(resolve, 100)); // 等待100毫秒
                    SplitNumber--; // 重试当前帧
                }
            }

            // 等待所有下载任务完成
            await Promise.all(downloadPromises).then(() => {
                console.log('所有下载已完成');
                file.get({
                    uri: `internal://files/vid/${decode_token}/output_audio.mp3`,
                    success: (getdata) => {
                        prompt.showToast({
                            message: "音频文件大小：" + getdata.length
                        })
                    }
                })
                setTimeout(() => {
                    router.replace({
                    uri: "pages/success",
                    params: {
                        TitleBarText: "下载完毕",
                        TipsText: "视频已下载完毕！\n请返回主页，在“音频管理”中即可播放！"
                    }
                }, 2000);
            })

            }).catch(error => {
                console.error('下载过程中出现错误:', error);
                router.replace({
                    uri: "pages/error",
                    params: {
                        TitleBarText: "下载失败",
                        ErrorText: "在下载过程中发生错误：" + error.message
                    }
                });
            });
        },

        async onAllDownloadsComplete(down_url) {
            // 这里定义下载完成后想要执行的操作
            console.log('All downloads are successfully completed. Proceeding with post-download operations.');

            this.down_tips_text = "正在下载音频切片"

            this.downloaded_frames = 0
            this.view_downloaded_frames = 0
            this.frames_to_download = this.audiosplit_count

            // 下载并保存音频
            await this.downloadAudioFiles(down_url, this.audiosplit_count, this.decode_token)
        }
    },
    RouterBack() {
        console.log("clicked")
        router.back()
    },
    // 当slider被用户修改的时候改回去
    SliderChange(progress, isFromUser){
        if(isFromUser){
            this.view_downloaded_frames = downloaded_frames
        }
    },
    onInit(){
        this.downloading_anim = setInterval(() => {
            if((this.downloading_anim_index_num > this.downloading_anim_frame_count) && this.downloading_anim_loop){
                this.downloading_anim_index_num = 1
            }
            if(this.downloading_anim_index_num <= this.downloading_anim_frame_count){
                this.downloading_anim_img_src = this.downloading_anim_src_header + this.downloading_anim_index_num + ".png"
                this.downloading_anim_index_num++
            }
        },35)

        // 老惯例，从storage拿两大神器
        storage.get({
            key: "token",
            success: (data) => {
                this.token = data
                console.log(data)
            }
        })
        storage.get({
            key: "username",
            success: (data) => {
                this.username = data
                console.log(data)
            }
        })

        // 下面的操作等1000ms才执行，因此也相当于给storage.get充足的时间了
        // 就不需要嵌套写success里了
        setTimeout(() => {
            fetch.fetch({
                url: this.$app.$def.ServerURL + `api/v1/decode/get_vid_down_info/${this.token}/${this.username}/${this.decode_token}`,
                responseType: "json",
                success: (data) => {
                    console.log(data)
                    if(data.code == 200){
                        if(data.data.success){
                            var RetDecJson = {
                                "formatVersion": 0,
                                "title": this.videotitle,
                                "width": this.w,
                                "height": this.h,
                                "fps": this.fps,
                                "frame": data.data.data.frame,
                                "pic_format": this.format,
                                "pics": `vid/${this.decode_token}/output_`
                            }

                            var frame_count = data.data.data.frame
                            var audiosplits_count = data.data.data.audiosplit
                            this.frames_to_download = frame_count
                            this.audiosplit_count = audiosplits_count
                            var down_url = data.data.data.url

                            console.log("begin mkdir")

                            file.mkdir({
                                uri: "internal://files/vid/" + this.decode_token,
                                success: () => {
                                    console.log("begin write asplayerdec")
                                    file.writeText({
                                        uri: "internal://files/" + this.decode_token + '.asplayerdec',
                                        text: JSON.stringify(RetDecJson),
                                        success: () => {
                                            this.nowDownload(down_url)
                                        },
                                        fail: (data, code) => {
                                            router.replace({
                                                uri: "pages/error",
                                                params: {
                                                    TitleBarText: "系统错误",
                                                    ErrorText: "无法创建以decode_token为名的AsPlayerDec文件，因此无法记录将要下载的帧序列，请报告这个问题。错误信息：" + data + " 错误代码：" + code
                                                }
                                            })
                                        }
                                    })
                                },
                                fail: (data, code) => {
                                    router.replace({
                                        uri: "pages/error",
                                        params: {
                                            TitleBarText: "系统错误",
                                            ErrorText: "无法创建以decode_token为名的文件夹，因此无法存放将要下载的帧序列，请报告这个问题。错误信息：" + data + " 错误代码：" + code
                                        }
                                    })
                                }
                            })
                        }
                        else{
                            clearInterval(this.downloading_anim)
                            router.replace({
                                uri: "pages/error",
                                params: {
                                    TitleBarText: "下载失败",
                                    ErrorText: "尝试向服务端请求视频下载地址，服务端返回出现错误：" + data.data.message
                                }
                            })
                        }
                    }
                    else{
                        clearInterval(this.downloading_anim)
                        router.replace({
                            uri: "pages/error",
                            params: {
                                TitleBarText: "请求失败",
                                ErrorText: "服务器并未返回预期的200代码，而是" + data.code + "代码，这可能意味着服务器挂了。如果许多人都遇到了这个问题，请联系我们；否则，请再试一遍"
                            }
                        })
                    }
                }
            })
        },1000)
    }
 }
</script>

<style>
.titlebar {
  width: 55%;
  margin-top: 45px;
  align-items: center;
}
.titlebar-text {
  align-items: center;
  justify-content: center;
  width: 100%;
}

.normal_text {
    font-weight: bold;
    font-size: 35px;
    text-align: center;
}

.download-page {
  display: flex;
  flex-direction: column;
  align-items: center;
  height: 100%;
  position: absolute;
  width: 100%;
}
</style>